# -*- coding: utf-8 -*-
"""Results_stage

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JYEaVPfgHlAImDeXVEYoZjq8uWRR3MX6
"""

import numpy as np
import pandas as pd
import numpy.ma as ma
import statistics
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

data_centers = pd.read_csv('export_centers_ut.csv')
centers = pd.DataFrame(data_centers)

data_X = pd.read_csv('export_ut.csv')
X = pd.DataFrame(data_X)

centers.head()

X.tail()

#ACA DEFINO EL RANGO PARA ENCONTRAR LOS MAS ELEVADOS
# Getting highest cluster

# visualizing the clusters
#fig = plt.figure(figsize=(11,8))
#ax = fig.add_subplot(111, projection='3d')

#import seaborn as sns


container_highest_clusters = list() # list of ids highest clusters
container_mode_clusters = list() # list of how many clusters there are every day

for i in range(1,31):
  #print("id",i)
  z_centers_day = centers.loc[centers['day'] == i,'center_z']
  x_centers_day = centers.loc[centers['day'] == i,'center_x']
  y_centers_day = centers.loc[centers['day'] == i,'center_y']
  current_day = centers.loc[centers['day'] == i,'day']
  highest_day = np.argmax(z_centers_day)

  ## Range lower and higher
  lower_range = z_centers_day.values[highest_day] - .1 # range minimum: (max - delta)
  #higher_range = z_centers_day[highest_day] + .2
  #range_day = np.arange( lower_range, higher_range, .1 )
  ## getting other clusters like the highes (if there is)

  highest_clusters = list() # list of all clusters highest
  for ii,c in enumerate(z_centers_day):
    if c > lower_range:
      highest_clusters.append(ii) # append only the cluster label to compare with the centers later

  container_highest_clusters.append(highest_clusters)
  container_mode_clusters.append(len(highest_clusters))

K_CLUSTERS = max(container_mode_clusters)

subclusters_centers = list()
subclusters_labels = list()

for i,subcluster in enumerate(container_highest_clusters[:]):
  container_x_hat = list()
  for j, id in enumerate(subcluster):
    x_day = X[X['day'] == (i+1)]
    x_temp = x_day[x_day['label'] == id]
    x_temp1 = x_temp.iloc[:, :3].values
    container_x_hat.append(x_temp1)

  x_hat = np.concatenate(([c for c in container_x_hat]), axis=None)
  x_hat = x_hat.reshape(-1,3)

  clustering = KMeans(n_clusters=K_CLUSTERS,random_state=0, init='k-means++')
  cluster_labels = clustering.fit_predict(x_hat)
  cluster_centers = clustering.cluster_centers_

  subclusters_centers.append(cluster_centers)
  subclusters_labels.append(cluster_labels)

subclusters_centers[0]







x_day_1 = X[X['day'] == 1]
x1 = x_day_1[x_day_1['label'] == container_highest_clusters[0][0][4]]
x2 = x_day_1[x_day_1['label'] == container_highest_clusters[0][1][4]]

x_1 = x1.iloc[:, :3].values
x_2 = x2.iloc[:, :3].values

x_hat = np.append(x_1,x_2)
x_hat = x_hat.reshape(-1,3)

clustering = KMeans(n_clusters=3,random_state=0, init='k-means++')
cluster_labels = clustering.fit_predict(x_hat)
cluster_centers = clustering.cluster_centers_
print(cluster_labels,cluster_centers)

# visualizing the clusters
fig = plt.figure(figsize=(11,8))
ax = fig.add_subplot(111, projection='3d')

ax.scatter(x1['X_m'], x1['Y_m'], x1['Z_m'])
ax.scatter(x2['X_m'], x2['Y_m'], x2['Z_m'])

#ax.scatter(x_hat[:,0],x_hat[:,1],x_hat[:,2],s=50,c="green")
ax.scatter(cluster_centers[:,0],cluster_centers[:,1],cluster_centers[:,2],s=200,c="red")
#ax.scatter(X[X['day'] == 1]['X_m'],X[X['day'] == 1]['Y_m'],X[X['day'] == 1]['Z_m'])
ax.scatter(centers[centers['day'] == 1]['center_x'],centers[centers['day'] == 1]['center_y'],centers[centers['day'] == 1]['center_z'],s=100,c="black")

#for i in range(len(highest_clusters)):
#  ax.scatter(highest_clusters[i][0],highest_clusters[i][1],highest_clusters[i][2],s=300,c="red")

ax.set_title("CLUSTERING") 
ax.set_xlabel('Centre de gravité X')
ax.set_ylabel('Centre de gravité Y')
ax.set_zlabel('Gray level normalized')
ax.view_init(30, 30)
plt.draw()
plt.pause(.001)
fig.show()
plt.show()



for j in range(len(highest_clusters)):
    if highest_clusters[j][3] == 1:
      c = "red"
    elif highest_clusters[j][3] == 2:
      c = "blue"
    elif highest_clusters[j][3] == 3:
      c = "yellow"
    elif highest_clusters[j][3] == 4:
      c = "aqua"
    elif highest_clusters[j][3] == 5:
      c = "blueviolet"
    elif highest_clusters[j][3] == 6:
      c = "cadmiumorange"
    else:
      c = "gren"
    ax.scatter(highest_clusters[j][0],highest_clusters[j][1],highest_clusters[j][2],s=300,c=c, label="day-" + str(highest_clusters[j][3]))
  #ax.scatter(centers[centers['day'] == i]['center_x'],centers[centers['day'] == i]['center_y'],centers[centers['day'] == i]['center_z'],s=100,c="black")

ax.set_title("CLUSTERING") 
ax.set_xlabel('Centre de gravité X')
ax.set_ylabel('Centre de gravité Y')
ax.set_zlabel('Gray level normalized')
ax.view_init(20, 30)
ax.set_ylim([0,1])
ax.set_zlim([0,1])
plt.draw()
plt.pause(.001)
ax.legend()
fig.show()
plt.show()



# visualizing the clusters
fig = plt.figure(figsize=(11,8))
ax = fig.add_subplot(111, projection='3d')

ax.scatter(X[X['day'] == 1]['X_m'],X[X['day'] == 1]['Y_m'],X[X['day'] == 1]['Z_m'])
ax.scatter(centers[centers['day'] == 1]['center_x'],centers[centers['day'] == 1]['center_y'],centers[centers['day'] == 1]['center_z'],s=100,c="black")

#for i in range(len(highest_clusters)):
#  ax.scatter(highest_clusters[i][0],highest_clusters[i][1],highest_clusters[i][2],s=300,c="red")

ax.set_title("CLUSTERING") 
ax.set_xlabel('Centre de gravité X')
ax.set_ylabel('Centre de gravité Y')
ax.set_zlabel('Gray level normalized')
ax.view_init(30, 30)
plt.draw()
plt.pause(.001)
fig.show()
plt.show()

