# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16HeYOvInBETRENm9eIoLpeu2YC4ABXjb
"""

from google.colab import drive
drive.mount("/content/drive")

!apt-get install libgeos-3.5.0
!apt-get install libgeos-dev
!pip install https://github.com/matplotlib/basemap/archive/master.zip
!pip install http://sourceforge.net/projects/matplotlib/files/matplotlib-toolkits/

!pip install netcdf4
!pip install pyMCR
!pip install geopandas

"""# Libraries"""

#!/bin/env python
import sys
import glob
import os
import re
import numpy as np
import numpy.ma as ma
import matplotlib
#matplotlib.use('Agg')
import matplotlib.pyplot as plt
#plt.rcParams.update({'figure.max_open_warning': 0})
import matplotlib.colors as mcolors
from matplotlib.colors import ListedColormap
from scipy.interpolate import griddata
import torch
from mpl_toolkits.mplot3d import Axes3D
from PIL import Image
from skimage import measure, transform
#from skimage.segmentation import slic
#from skimage.segmentation import mark_boundaries
from skimage import io
from skimage import data, segmentation, color
from scipy.ndimage import label, generate_binary_structure
from scipy.spatial import distance
from scipy import ndimage
from shapely.geometry import Point, LineString, Polygon, LinearRing, MultiPoint
from descartes import PolygonPatch
import networkx as nx
import tarfile
import string
import calendar
import cv2
import random
from google.colab.patches import cv2_imshow
from mpl_toolkits.basemap import Basemap,cm
from mpl_toolkits.axes_grid1 import make_axes_locatable
import netCDF4
from geopandas import GeoSeries
from sklearn.neighbors import NearestNeighbors
from sklearn.cluster import KMeans
from sklearn import metrics
from sklearn.metrics import confusion_matrix, accuracy_score
import seaborn as sns
from scipy.signal import find_peaks
from sklearn.metrics.pairwise import euclidean_distances

DIR_DATA = '/content/drive/MyDrive/StageUParis/DATA/H2O/'
DIR_TRAIN = '/content/drive/MyDrive/StageUParis/DATA/LABELS/'
DIR_TEST = '/content/drive/MyDrive/StageUParis/Test/'

"""# Class **SplitImageLevels**"""

class SplitImageLevels():  
  image_type = "LT"
  year = 2008
  month = 5
  day = 1

  degree = 0.625
  pixel_size = 0.3125
  vmax = 35
  vmin = 10

  weight_gray_values = 1
  N_CLUSTERS = 2

  images = list()

  def __init__ (self,DIR_DATA=DIR_DATA, DIR_TRAIN=DIR_TRAIN):
    self.DIR_DATA = DIR_DATA
    self.DIR_TRAIN = DIR_TRAIN

  def __del__(self):
    print("Class finished")


  ############################################################################
  ####                      GETTERS AND SETTERS
  ############################################################################

  def set_DIR_DATA (self, DIR_DATA):
    self.DIR_DATA = DIR_DATA

  def get_DIR_DATA (self):
    return self.DIR_DATA

  def set_DIR_TRAIN (self, DIR_TRAIN):
    self.DIR_TRAIN = DIR_TRAIN
  
  def get_DIR_TRAIN (self):
    return self.DIR_TRAIN

  def set_DIR_TEST (self, DIR_TEST):
    self.DIR_TEST = DIR_TEST

  def get_DIR_TEST (self):
    return self.DIR_TEST

  def set_year(self,year):
    self.year = year

  def get_year(self):
    return self.year
  
  def set_month(self,month):
    self.month = month
  
  def get_month(self):
    return self.month

  def set_day(self,day):
    self.day = day

  def get_day(self):
    return self.day

  def set_image_type(self,image_type):
    self.image_type = image_type

  def get_image_type(self):
    return self.image_type

  def set_image_name(self,image_name):
    self.image_name = image_name

  def get_image_name(self):
    return self.image_name

  def set_pixel_size(self, degree, size):
    self.degree = degree
    self.pixel_size = size

  def set_region_area(self, max_area, min_area):
    self.max_area = max_area
    self.min_area = min_area

  def set_weight_gray_values(self, weight_gray_values):
    self.weight_gray_values = weight_gray_values

  def set_cluster_value (self, N_CLUSTERS):
    self.N_CLUSTERS = N_CLUSTERS

  def get_cluster_value(self):
    return self.N_CLUSTERS

  def set_vmin(self, vmin):
    self.vmin = vmin

  def get_vmin(self):
    return self.vmin
  
  def set_vmax(self, vmax):
    self.vmax = vmax

  def get_vmax(self):
    return self.vmax






  ############################################################################
  ####                        READ THE DATA
  ############################################################################

  def get_image_by_leves (self):
    #for index, layer in enumerate(np.arange(self.start, self.end, self.steps)):
    index = 0
    
    lat_g = np.arange(20.,50.,self.degree)
    lon_g = np.arange(100.,150.,self.degree)

    #initialization
    self.colgrid = np.zeros([lat_g.shape[0],lon_g.shape[0]], np.uint8)

    for year in range(self.year, self.year + 1):
      for month in range(self.month, self.month + 1):
        for day in range(self.day, self.day + 1):

          fname = self.DIR_DATA + 'IASIdaily_' + str(year) + '%02d'%month+'%02d'%day+'.nc'
          self.image_name = self.image_type + '-level-' + str(year) + '%02d'%month+'%02d'%day+'.png'

          print('reading info ...')

          if not(os.path.isfile(fname)):
            continue

          nc = netCDF4.Dataset(fname)
          flag = nc.variables['flag'][:]
          mask1 = (flag == 0) # Without clouds
          
          lat = nc.variables['lat'][mask1]
          lon = nc.variables['lon'][mask1]
          col = nc.variables[self.image_type][mask1]
          nc.close()

          mask2 = (np.isnan(col) == False) 

          # gridding the data
          for ilat in range(lat_g.shape[0]):
            for ilon in range(lon_g.shape[0]):
              # Grille régulier
              # 25 km
              # 0 25 degrée lattitude et longitude

              # Grille regulier of 0.125 degree
              maskgrid = (lat[:] >= (lat_g[ilat] - self.pixel_size)) & (lat[:] < (lat_g[ilat] + self.pixel_size)) & (lon[:] >= (lon_g[ilon] - self.pixel_size)) & (lon[:] < (lon_g[ilon] + self.pixel_size))
              
              # Defining invalid data
              mask = mask2 & maskgrid

              if len(col[mask]) != 0:
                median = np.mean(col[mask])
                #if median >= layer:
                self.colgrid[ilat,ilon] = median

          print('data readed correctly')

          # We mark the values at colgrid as invalid because they are maybe false positives or bad sampling
          self.colgrid1 = ma.masked_values(self.colgrid, 0.)

          self.v_x, self.v_y = np.meshgrid(lon_g, lat_g)
          gradx, grady = np.gradient(self.colgrid, edge_order=1)

          fig, (ax1) = plt.subplots(1, 1, figsize = (11,8))
          ax1.pcolormesh(self.v_x, self.v_y, self.colgrid, shading='nearest',cmap='gray', vmin=self.vmin, vmax=self.vmax)
          ax1.axis('off')
          fig.savefig(self.image_name, bbox_inches='tight', pad_inches=0)
          plt.close(fig)


          fig2, (ax2) = plt.subplots(1, 1, figsize = (11,8))
          ax2.pcolormesh(self.v_x, self.v_y, self.colgrid1, shading='nearest',cmap='jet', vmin=self.vmin, vmax=self.vmax)
          ax2.axis('off')
          fig2.savefig("color-" + self.image_name, bbox_inches='tight', pad_inches=0)
          plt.close(fig2)


  def get_image_datename(self):
    return ' IASI ' + self.image_type + " - " + str(self.day) +"/"+ str(self.month) +"/"+ str(self.year)



  def plot_original_image(self):

    #if self.image_type == 'LT':
    #  vmax = 35
    #  vmin = 3
    #else:
    #  vmax = 45
    #  vmin = 5

    fig, ax1 = plt.subplots(1,1)
    
    m=Basemap(llcrnrlon=100.,llcrnrlat=20.,urcrnrlon=150.,urcrnrlat=48.,resolution='i')
    m.drawcoastlines()
    m.drawmapboundary()
    m.drawmeridians(np.r_[100:151:10], labels=[0,0,0,1], color='grey',fontsize=8,linewidth=0)
    m.drawparallels(np.r_[20:48:5], labels=[1,0,0,0], color='grey',fontsize=8,linewidth=0)

    divider = make_axes_locatable(ax1)
    cax = divider.append_axes('right', size='1%', pad=0.05)
    cs = ax1.pcolormesh(self.v_x, self.v_y, self.colgrid1, shading='nearest',cmap='jet', vmin=self.vmin, vmax=self.vmax)
    ax1.set_title(self.get_image_datename())
    fig.colorbar(cs,cax=cax)
    


  ###############################################################
  ###             LOAD IMAGE INFORMATION
  ###############################################################

  def load_image_from_files (self, filename):
    img_bgr = io.imread(filename) 
    gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)

    return img_bgr, gray



  def process_set_images(self, image_gray, image_bgr):
    image, foreground, background = self.filter_image(image_gray)
    image,image_rbg,image_masked = self.filter_image_for_mser(image,foreground)
    regions_mser, boxes_mser = self.get_mser_regions(image_rbg)
    #self.plot_regions_mser_blue(image,regions_mser)

    kernel = np.ones((6,6), np.uint8)
    regx, regy, regs, polys, lines, values = self.set_mser_regions(image_masked, regions_mser)
    #self.plot_mser_final_regions(image_masked, regx, regy, values)
    #self.plot_polygons_hulls(image_masked,polys)

    image_projected, image_projected_mask = self.create_label_map(image, regions_mser)
    #self.plot_projected_image(image_projected, regions_mser,boxes_mser)

    labels_cc, num_cc = self.reconstruct_connected_component(image_projected_mask)
    centroids, grays_values, areas_partition, boxes_partition, ids_valid_regions = self.reconstruct_region_props(image_masked,labels_cc)
    #self.plot_regions_reconstructed(image_projected,centroids,areas_partition,grays_values,"du")

    X, weights = self.create_X(image_projected,centroids,grays_values,WEIGHT=5)
    #self.plot_X(X)
    #self.plot_weights(weights)

    #self.plot_test_best_cluster_number(X,weights,40,7)
    cluster_labels, cluster_centers = self.classify_regions(X,weights,7)
    #self.plot_clustered_regions_3d(X,5,cluster_labels,cluster_centers)







  ###############################################################
  ###             TRAITEMENT
  ###############################################################

  def filter_image (self, image):
    image = self.resize_image_percentage(image, 100)
    image = self.pretraitement_image(image,6,3)
    background, foreground = self.masking_interest_region(image)
    
    return image, foreground, background

  def resize_image_percentage (self, image, scale_percent = 100):
    ### SCALE
    width = int(image.shape[1] * scale_percent / 100)
    height = int(image.shape[0] * scale_percent / 100)
    dim = (width, height)
    image = cv2.resize(image, dim, interpolation = cv2.INTER_AREA)

    return image

  def pretraitement_image(self, image, kernel_size = 9, iterations=3):
    ### MORPHO FILTERS
    kernel = np.ones((kernel_size,kernel_size),np.uint8)
    image = cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel, iterations = iterations)

    return image

  ## REMOVING THE HOLES
  def masking_interest_region(self, image):
    # Take the holes (pixels value = 0) and set it as 255
    image = cv2.normalize(image, np.ones((image.shape[0], image.shape[0])), 0, self.vmax, cv2.NORM_MINMAX )
    image = np.where(image == 0, 255, image) 
    image = np.where(image != 255, 0, image) # This is the mask of the background
    image_holes_dilate = cv2.morphologyEx(image, cv2.MORPH_DILATE, np.ones((3,3),np.uint8), iterations = 3)
    image_holes_dilate_inv = cv2.bitwise_not(image_holes_dilate) # This is the mask of the foreground

    return image_holes_dilate, image_holes_dilate_inv

  def filter_image_for_mser(self, image, foreground):
    #kernel = np.ones((3,3),np.uint8)
    #foreground = cv2.dilate(foreground,kernel,iterations = 3)
    image = cv2.bitwise_and(image,image, mask=foreground)

    image_masked = ma.masked_values(image, 0.)
    image_color = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)
    image_color = cv2.bitwise_and(image_color,image_color, mask=foreground)
  
    return image, image_color, image_masked
  
  ## REMOVING THE HOLES
  

  def get_mser_regions(self, image):
    """
    delta	          it compares (sizei−sizei−delta)/sizei−delta
    min_area	      prune the area which smaller than minArea
    max_area	      prune the area which bigger than maxArea
    max_variation	  prune the area have similar size to its children
    min_diversity	  for color image, trace back to cut off mser with diversity less than min_diversity
    max_evolution	  for color image, the evolution steps
    area_threshold	for color image, the area threshold to cause re-initialize
    min_margin	    for color image, ignore too small margin
    edge_blur_size	for color image, the aperture size for edge blur
    """

    mser = cv2.MSER_create( 1, # delta 
                        300, # min_area
                        34400, #max_area 
                        4., # max_variation 
                        .03, # min_diversity 
                        10000, # max_evolution 
                        1.04, # area_threshold 
                        0.003, # min_margin
                        5) # edge_blur_size

    # (1, 100, 20000, .25, 1., 1000, 1.001, 0.003, 5)
    regions, bboxes = mser.detectRegions(image)
    regions = sorted(regions, key=cv2.contourArea, reverse=True)

    bboxes = sorted(bboxes, key=self.sort_boxes_by_area, reverse=True)

    print("REGIONS found with MSER",len(regions))

    return regions, bboxes

  def sort_boxes_by_area(self, box):
    _, _, w, h = box
    area = w * h
    return area

  def plot_regions_mser_blue(self, image, regions):
    """
    image : image in gray level
    """
    img_mser = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)

    for p in regions:
      for k in p:
        cv2.circle(img_mser, (k[0],k[1]), radius=0, color=(0, 0, 255), thickness=-1)
    fig, ax = plt.subplots(1,1)
    ax.imshow(img_mser)
    ax.set_title("REGIONS MSER " + self.get_image_datename())
    fig.show()




  ###############################################################
  ###             PLOTTING
  ###############################################################

  def set_mser_regions(self, image, regions):
    regsX = list()
    regsY = list()
    regs = list()
    regsPoly = list()
    regsLine = list()
    values_gray = list()

    for r in regions:
      region = list()
      hull = cv2.convexHull(r)

      for h in hull:
          region.append(h[0].tolist())

      region.append(region[0])
      poly = Polygon(region)
      line = LineString(region)
      value_pixel = self.get_region_value(image,poly)

      if np.isnan(value_pixel):
        print(value_pixel)
        break

      xs = [pnt[0] for pnt in r]
      ys = [pnt[1] for pnt in r]

      regsX.append(xs)
      regsY.append(ys)
      regs.append(r)
      regsPoly.append(poly)
      regsLine.append(line)
      values_gray.append(value_pixel)

    return regsX, regsY, regs, regsPoly, regsLine, values_gray

  def plot_polygons_hulls(self, image, polygons):
    fig, ax = plt.subplots(1,1)
    xx_range = [0, image.shape[1]]
    yy_range = [0, image.shape[0]]

    for poly in polygons:
      xxx,yyy = poly.exterior.xy

      ax.plot(xxx,yyy)
      ax.set_xlim(*xx_range)
      ax.set_ylim(*yy_range)
      ax.set_title("CONVEX HULLS MSER " + self.get_image_datename())
      ax.invert_yaxis()

    fig.show()

  def plot_mser_final_regions (self, image, regsX, regsY, values):
    x_range = [100, 150, 10]
    y_range = [20, 48, 5]

    rgsX2 = list()
    rgsY2 = list()

    for reg in regsX:
      line = list()
      for i in reg:
        line.append((i / (image.shape[1] / 50)) + 100)
      rgsX2.append(line)

    for reg in regsY:
      line = list()
      for i in reg:
        line.append(((image.shape[0] - i) / (image.shape[0] / 28)) + 20)
      rgsY2.append(line)

    fig, ax = plt.subplots(1,1)
    m=Basemap(llcrnrlon=100.,llcrnrlat=20.,urcrnrlon=150.,urcrnrlat=48.,resolution='i')
    m.drawcoastlines()
    m.drawmapboundary()
    m.drawmeridians(np.r_[100:151:10], labels=[0,0,0,1], color='grey',fontsize=8,linewidth=0)
    m.drawparallels(np.r_[20:48:5], labels=[1,0,0,0], color='grey',fontsize=8,linewidth=0)

    max_color_value = self.vmax
    
    colors = sns.color_palette("YlOrBr", self.vmax + 1)
    cmap = matplotlib.colors.ListedColormap(colors)
    norm = matplotlib.colors.BoundaryNorm(np.arange(self.vmin, self.vmax + 1) - 0.5, cmap.N)

    for i,val in enumerate(values):
      ax.scatter(rgsX2[i], rgsY2[i], marker='.', color=cmap(norm(int(val))) )
      ax.set_xlim(*x_range)
      ax.set_ylim(*y_range)
      ax.set_title('REGIONS ' + str(len(values)) + self.get_image_datename())

    sm = matplotlib.cm.ScalarMappable(cmap=cmap, norm=norm)
    cbar_ax = fig.add_axes([0.09, 0.06, 0.84, 0.02])
    cb = fig.colorbar(sm,cax=cbar_ax,orientation='horizontal')
    if self.image_type == "UT":
      cb.set_ticklabels(np.arange(self.vmin,self.vmax + 1,int(self.vmax / 10 )))
    else:
      cb.set_ticklabels(np.arange(self.vmin,self.vmax + 1, int(self.vmax / 9) )) # 9 is the number of values plotted in the colorbar i.e [10--13--16--...--35]

    cb.set_label('DU')

  def get_region_value(self, image, polygon, isABox=False):
    """
    This function returns the mean pixel value from a given polygon
    """
    image = cv2.normalize(image, np.ones((image.shape[0], image.shape[0])) , self.vmin, self.vmax, cv2.NORM_MINMAX )

    if isABox:
      minx, miny, maxx, maxy = polygon
    else:
      minx, miny, maxx, maxy = polygon.bounds #Boite englobante

    pixel_steps_x = image.shape[1] * self.degree / self.colgrid.shape[1]
    pixel_steps_y = image.shape[0] * self.degree / self.colgrid.shape[0]

    longs = np.arange(minx, maxx, pixel_steps_x)
    lats = np.arange(miny, maxy, pixel_steps_y)

    set_of_coordinates = list()
    for lon in longs:
      for lat in lats:
        if np.isnan(lat):
          print("lat is nan")
        if np.isnan(lon):
          print("lon is nan")

        if image[int(lat), int(lon)] > 0:
          set_of_coordinates.append(image[int(lat), int(lon)])

    value_pixel = np.mean(set_of_coordinates)

    if np.isnan(value_pixel):
      value_pixel = 1.
    
    return value_pixel

  def create_label_map(self,image, regions):
    # Creation of Carte de labels
    
    projected = np.zeros(image.shape, np.uint16)

    connected_components = list()

    for i,r in enumerate(regions):
      counter = (i + 1)
      
      counter_has_summed = False
      cc_has_summed = False

      for k in r:
        if projected[k[1]][k[0]] != 0:
          ## search intersection
          if counter_has_summed is False:
            counter = counter + 1 #int(projected[k[1]][k[0]])
            connected_components.append(counter)
            counter_has_summed = True

          cv2.circle(projected, (k[0],k[1]), radius=1, color=(counter), thickness=-1, lineType=cv2.FILLED)
        else:
          if cc_has_summed is False:
            connected_components.append(counter)
            cc_has_summed = True
          
          cv2.circle(projected, (k[0],k[1]), radius=1, color=(counter), thickness=-1, lineType=cv2.FILLED)
        
    kernel = np.ones((3,3), np.uint8)
    projected = cv2.morphologyEx(projected, cv2.MORPH_CLOSE, kernel, iterations = 2)

    projected_masked = ma.masked_values(projected, 0.)

    return projected, projected_masked

  def plot_projected_image(self, image_projected, regions, boxes):
    # font
    font = cv2.FONT_HERSHEY_SIMPLEX
    # Blue color in BGR
    color = (255, 0, 0)
    # Line thickness of 2 px
    thickness = 1

    image_projected_color = cv2.cvtColor(image_projected, cv2.COLOR_GRAY2BGR)

    for box in boxes:
      x, y, w, h = box
      cv2.rectangle(image_projected_color, (x, y), (x + w, y + h), (0, 0, 255), 2)

    # Using cv2.putText() method
    for i,r in enumerate(regions):
      cv2.putText(image_projected_color, str(i+1), (r[0][0] + 10, r[0][1]), font, 1, color, thickness, cv2.LINE_AA)

    fig, (ax1,ax2) = plt.subplots(1,2, figsize=(21,15))
    ax1.imshow(image_projected, cmap="gray")
    ax1.set_title("Label map gray scale")
    ax2.imshow(image_projected_color)
    ax2.set_title("Label map with container box")
    plt.title("Label map " + self.get_image_datename())
    fig.show()

  def reconstruct_connected_component(self, image_projected):
    labels, num = measure.label(image_projected, return_num=True, background=0.)
    print("Total connected components", num)
    return labels, num

  def reconstruct_region_props(self, image_masked, labels_cc, min_width=10, min_height=10):
    # return centroids
    rescale=1.0
    centroids = list()
    areas_partition = list()
    boxes_partition = list()
    grays_values = list()
    ids_valid_regions = list()

    for i,region in enumerate(measure.regionprops(label_image=labels_cc)):
      x_min = region.bbox[1]
      x_max = region.bbox[3]
      y_min = region.bbox[0]
      y_max = region.bbox[2]
      # TODO: CORREGIR EL PROBLEMA CON LAS CLUSTERS Y LAS REGIONES QUE SE PIERDEN
      if (x_max - x_min) > min_width and y_max - y_min > min_height:
        boxes_partition.append(np.array([x_min,y_min,x_max,y_max]))
        cx, cy = map(lambda p: int(p*rescale), (region.centroid[0], region.centroid[1]))
        centroids.append((cx, cy))
        areas_partition.append(region.area)
        grays_values.append(self.get_region_value(image_masked,np.array([x_min,y_min,x_max,y_max]),True)) # Gray values for the regions partitions
        ids_valid_regions.append(i) # List to compare with CC. The idea is to rebuild the region as image, to do that we need the region id

    print("Regions reconstructed",len(centroids))

    return centroids, grays_values, areas_partition, boxes_partition, ids_valid_regions

  def plot_regions_reconstructed(self, image_projected, centroids, areas_partition, grays_values, text_to_plot="id"):
    # font
    font = cv2.FONT_HERSHEY_SIMPLEX
    # Line thickness of 2 px
    thickness = 1
    
    image_projected = cv2.cvtColor(image_projected, cv2.COLOR_GRAY2BGR)

    for i in range(len(centroids)):
        color = (random.randint(0,256), random.randint(0,256), random.randint(0,256))
        text = None

        if text_to_plot == "id":
          text = str(i+1)
        elif text_to_plot == "area":
          text = str(int(areas_partition[i]))
        elif text_to_plot == "du":
          text = str(int(grays_values[i]))
        else:
          text = str(i+1)

        # ID: str(i+1)
        # Area: str(areas_partition[i])
        # DU: str(int(imageLT.get_region_value(t_i,boxes_partition[i],True)))

        cv2.putText(image_projected, text, (int(centroids[i][1]), int(centroids[i][0])), font, .5, color, thickness, cv2.LINE_AA)
        cv2.circle(image_projected, (int(centroids[i][1]), int(centroids[i][0])), 3, color, -1)

    fig, ax = plt.subplots(1,1, figsize=(15,10))
    ax.imshow(image_projected)
    ax.set_title(text_to_plot + self.get_image_datename())
    fig.show()

  ## CLUSTERING




  def sigmoid(self,X):
    return np.exp(X)
    #return 1/(1+np.exp(X))

  def softmax(self,X):
    expo = np.exp(X)
    expo_sum = np.sum(np.exp(X))
    return expo/expo_sum


  def create_X(self, image_projected, centroids, grays_values, WEIGHT=5):
    x_norm = list() # array with centre de gravite x, y and gray value [(x,y,z)]
    weights_list = list()
    grays = grays_values.copy()

    ## CREATE ARRAY BEFORE NORMALIZATION
    for gray in grays:
      tmp_w = WEIGHT
      #if WEIGHT > 1:
      #  tmp_w = WEIGHT * np.exp(gray)
      weights_list.append(tmp_w * gray)

    #g_v = np.asarray(grays_values)
    #Example with mmatrix defined above
    #weights_list = self.sigmoid(g_v)

    gray_values_norm = (grays - min(grays)) / (max(grays) - min(grays))

    for i,centroid in enumerate(centroids[:]):
      x = centroid[0] / image_projected.shape[0]
      y = centroid[1] / image_projected.shape[1]
      z = gray_values_norm[i]
      x_norm.append(np.array([x,y,z]))

    X = np.asarray(x_norm)
    # weights = np.asarray(weights_list) # weights_list.copy() 
    
    return X, weights_list

  def plot_X(self,X):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    for i in range(len(X)):
      ax.scatter(X[i,0],X[i,1],X[i,2])

    plt.title("X" + self.get_image_datename()) 
    ax.set_xlabel('Centre de gravité X')
    ax.set_ylabel('Centre de gravité Y')
    ax.set_zlabel('DU - normalized [0-1]')
    fig.show()

  def plot_weights(self, weigths):
    fig, ax = plt.subplots(1,1)
    ax.plot(weigths)
    ax.set_title("Weigths" + self.get_image_datename())
    ax.set_xlabel("Number of Regions")
    ax.set_ylabel("Weight")
    fig.show()

  def plot_test_best_cluster_number(self, X, weights, N_ITERATIONS= 40, N_CLUSTERS = 7):
    # TESTING KMEANS
    wcss = list()
    # int((len(centers) / 5))
    print("finding best cluster...")
    for i in range(1,N_ITERATIONS):
      #print("kmeans for cluster #",i)
      kmeanstest = KMeans(n_clusters=i, random_state=0, max_iter=500).fit(X, sample_weight=np.asarray(weights))
      wcss.append(kmeanstest.inertia_)

    fig0, ax = plt.subplots(1,1)
    ax.scatter(N_CLUSTERS,wcss[N_CLUSTERS], c='red', label="Selected cluster")
    ax.plot( np.arange(len(wcss)) , wcss)
    ax.set_title("Optimal number of clusters")
    ax.set_xlabel("Number of clusters (k)")
    ax.set_ylabel("Inertia")
    fig0.legend()

  def classify_regions(self,X,weights,N_CLUSTERS=7):
    print("clustering...")

    clustering = KMeans(n_clusters=N_CLUSTERS,random_state=0, init='k-means++')
    cluster_labels = clustering.fit_predict(X, sample_weight=np.asarray(weights))
    cluster_centers = clustering.cluster_centers_

    print("Cluster finished.")

    return cluster_labels, cluster_centers, clustering

  def plot_clustered_regions_3d(self,X,WEIGHT,cluster_labels, cluster_centers):
    # visualizing the clusters
    fig = plt.figure(figsize=(11,8))
    ax = fig.add_subplot(111, projection='3d')

    #X_gray_norm = X[:,2]
    #X_gray = cv2.normalize(X_gray_norm, None, alpha=self.vmin, beta=self.vmax, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_64F)

    for i in range(max(cluster_labels) + 1):
      ax.scatter(X[cluster_labels==i,0],X[cluster_labels==i,1],X[cluster_labels==i,2], label="cluster " + str(i+1))

    #c_center_norm = cluster_centers[:,2]
    #c_center = cv2.normalize(c_center_norm, None, alpha=self.vmin, beta=self.vmax, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_64F)
    ax.scatter(cluster_centers[:,0],cluster_centers[:,1],cluster_centers[:,2],s=200,c="black",label="centroid "+str(i))

    ax.set_title("CLUSTERING W: " + str(WEIGHT) + imageLT.get_image_datename()) 
    ax.set_xlabel('Centre de gravité X')
    ax.set_ylabel('Centre de gravité Y')
    ax.set_zlabel('Gray level normalized')
    fig.legend()
    ax.view_init(30, 30)
    plt.draw()
    plt.pause(.001)
    fig.show()
    plt.show()

  def plot_clustered_regions_2d(self,X,WEIGHT,cluster_labels, cluster_centers):
    fig, ax = plt.subplots(1,1)
    for i in range(max(cluster_labels) + 1 ):
      ax.scatter(X[cluster_labels==i,1],X[cluster_labels==i,0],label="cluster " + str(i+1))
      ax.scatter( cluster_centers[i,1],cluster_centers[i,0] , s=10000 ,  facecolors='none', edgecolors='blue' ) 

    ax.scatter(cluster_centers[:,1],cluster_centers[:,0],s=200,c="black",label="centroid")
    ax.set_title("CLUSTERING W: " + str(WEIGHT) + self.get_image_datename()) 
    ax.set_xlabel("Centre de gravité X")
    ax.set_ylabel("Centre de gravité Y")
    ax.invert_yaxis()
    fig.legend()
    fig.show()

  def get_highest_cluster(self, cluster_centers):
    # TO TAKE ONLY THE HIHGEST REGION (TEST)

    cluster_highest_region = list()

    for center in cluster_centers:
      cluster_highest_region.append(center[2])

    index_highest = np.argmax(cluster_highest_region)
    highest_cluster = cluster_centers[index_highest]

    return highest_cluster, index_highest


  def get_image_cluster(self, labels_cc, cluster_labels):
    image_cluster = np.zeros(labels_cc.shape, np.uint8)
    cluster_labels1 = cluster_labels.copy()
    cluster_labels1 += 1

    for i,lbl in enumerate(cluster_labels[:]):
      image_cluster = np.where(labels_cc == (i+1), lbl + 1, image_cluster)

    fig,axx = plt.subplots(1,1)
    axx.imshow(image_cluster)

    return image_cluster

  def plot_image_cluster(self, labels_cc, cluster_labels, index_highest):
    fig, (ax1,ax2) = plt.subplots(1,2, figsize=(11,8))
    tmp = np.zeros(labels_cc.shape, np.uint8)
    tmp1 = tmp.copy()

    cluster_labels1 = cluster_labels.copy()
    cluster_labels1 += 1

    for i,lbl in enumerate(cluster_labels[:]):
      tmp = np.where(labels_cc == (i+1), lbl + 1, tmp)

    tmp1 = np.where(tmp == (index_highest + 1),1,0)

    ax1.imshow(tmp, "jet")
    ax2.imshow(tmp1, "gray")
    fig.show()


  def plot_silhouette_coefficient(self, X, weights):
    # visualizing Silhouette coefficient
    for n_clusters in range(2,15):
      # Create a subplot with 1 row and 2 columns
      fig, (ax1, ax2) = plt.subplots(1, 2)
      fig.set_size_inches(18, 7)
      # The 1st subplot is the silhouette plot
      # The silhouette coefficient can range from -1, 1 but in this example all
      # lie within [-0.1, 1]
      ax1.set_xlim([-0.1, 1])
      # The (n_clusters+1)*10 is for inserting blank space between silhouette
      # plots of individual clusters, to demarcate them clearly.
      ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])
      # Initialize the clusterer with n_clusters value and a random generator
      # seed of 10 for reproducibility.
      clusterer = KMeans(n_clusters=n_clusters, random_state=10)
      cluster_labels = clusterer.fit_predict(X, sample_weight=weights)
      # The silhouette_score gives the average value for all the samples.
      # This gives a perspective into the density and separation of the formed
      # clusters
      silhouette_avg = metrics.silhouette_score(X, cluster_labels)
      print("For n_clusters =", n_clusters, "The average silhouette_score is :", silhouette_avg)
      # Compute the silhouette scores for each sample
      sample_silhouette_values = metrics.silhouette_samples(X, cluster_labels)
      y_lower = 10
      
      for i in range(n_clusters):
        ith_cluster_silhouette_values = sample_silhouette_values[cluster_labels == i]
        ith_cluster_silhouette_values.sort()
        
        size_cluster_i = ith_cluster_silhouette_values.shape[0]
        y_upper = y_lower + size_cluster_i
        #color = cm.nipy_spectral(float(i) / n_clusters) 
        ax1.fill_betweenx(np.arange(y_lower, y_upper), 0, ith_cluster_silhouette_values,alpha=0.7)
        
        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))
        
        y_lower = y_upper + 10 # 10 for the 0 samples
        ax1.set_title("The silhouette plot for the various clusters.")
        ax1.set_xlabel("The silhouette coefficient values")
        ax1.set_ylabel("Cluster label")
        
        ax1.axvline(x=silhouette_avg, color="red", linestyle="--")
        ax1.set_yticks([]) # Clear the yaxis labels / ticks
        ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])
        
        #colors = cm.nipy_spectral(cluster_labels.astype(float) / n_clusters)
        ax2.scatter(X[:, 0], X[:, 1], marker=".", s=30, lw=0, alpha=0.7, edgecolor="k")
        
        centers = clusterer.cluster_centers_
        ax2.scatter(centers[:, 0], centers[:, 1], marker="o",c="white", alpha=1, s=200, edgecolor="k")
        
        for i, c in enumerate(centers):
          ax2.scatter(c[0], c[1], marker="$%d$" % i, alpha=1,s=50, edgecolor="k")
          ax2.set_title("The visualization of the clustered data.")
          ax2.set_xlabel("Feature space for the 1st feature")
          ax2.set_ylabel("Feature space for the 2nd feature")
          plt.suptitle(("Silhouette analysis for KMeans clustering on sample data with n_clusters = %d" % n_clusters), fontsize=14, fontweight="bold")
      plt.show()

  
  ###############################################################
  ###             REMOVE TEMP FILES
  ###############################################################

  def remove_temporal_files(self):
    try:
      os.remove(self.image_name)
      #Raising your own errors
      raise ErrorType("Deleting")
    except ErrorType as e:
      print("Error deleting the file -> ", self.image_name)

imageLT = SplitImageLevels()

imageLT.set_year(2008)
imageLT.set_month(12)
imageLT.set_day(7)
imageLT.set_image_type("LT")
imageLT.set_vmin(10)
imageLT.set_vmax(35)
imageLT.set_image_name("levels")
imageLT.set_weight_gray_values(1)
imageLT.set_cluster_value(30)
imageLT.set_pixel_size(0.25,.125)
imageLT.get_image_by_leves()
image_bgr , image_gray = imageLT.load_image_from_files(imageLT.get_image_name())
image, foreground, background = imageLT.filter_image(image_gray)
image,image_rbg,image_masked = imageLT.filter_image_for_mser(image,foreground)
regions_mser, boxes_mser = imageLT.get_mser_regions(image_rbg)
imageLT.plot_original_image()
regx, regy, regs, polys, lines, values = imageLT.set_mser_regions(image_masked, regions_mser)

imageLT.plot_mser_final_regions(image_masked, regx, regy, values)



image_projected, image_projected_mask = imageLT.create_label_map(image, regions_mser)
imageLT.plot_projected_image(image_projected,regions_mser,boxes_mser)

labels_cc, num_cc = imageLT.reconstruct_connected_component(image_projected_mask)
print(num_cc)

centroids, grays_values, areas_partition, boxes_partition, ids_valid_regions = imageLT.reconstruct_region_props(image_masked,labels_cc)
imageLT.plot_regions_reconstructed(image_projected, centroids, areas_partition, grays_values,'du')

WEIGHT = 2
N_CLUSTERS = 10

X, weights = imageLT.create_X(image_projected,centroids,grays_values,WEIGHT)
cluster_labels, cluster_centers, model = imageLT.classify_regions(X,weights,N_CLUSTERS)

plt.plot(grays_values)
imageLT.plot_weights(weights)

imageLT.plot_test_best_cluster_number(X,weights,40,N_CLUSTERS)

#imageLT.plot_clustered_regions_3d(X,5,cluster_labels,cluster_centers)
angle = np.linspace( 0 , 2 * np.pi , 5 ) 
radius = 0.4
x = radius * np.cos( angle ) 
y = radius * np.sin( angle ) 

print(x,y)

imageLT.plot_clustered_regions_2d(X,WEIGHT,cluster_labels,cluster_centers)
#plt.plot(np.arange(0,1,.1))

#plt.plot( x, y )

for i in range(len(cluster_centers) - 1):
  distances = list()
  for j in range(len(cluster_centers)):
    xx = [cluster_centers[i][0], cluster_centers[j][0]]
    m_x = (xx[1] + xx[0]) / 2
    yy = [cluster_centers[i][1], cluster_centers[j][1]]
    m_y = (yy[1] + yy[0]) / 2

    d_1 = distance.euclidean(xx, yy)
    distances.append(d_1)

  #np.argmax(distances)
  #print(distances)
fig, ax = plt.subplots(1,1)

dists = euclidean_distances(cluster_centers)

for i, dist in enumerate(dists):
  max_dist = dist[np.argmax(dist)] * 20000
  ax.scatter( cluster_centers[i,1],cluster_centers[i,0] , s=int(max_dist) ,  facecolors='none', edgecolors='blue' ) 

#print(euclidean_distances(cluster_centers[0], cluster_centers[1:]))


for i in range(max(cluster_labels) + 1 ):
  ax.scatter(X[cluster_labels==i,1],X[cluster_labels==i,0],label="cluster " + str(i+1))
  

ax.scatter(cluster_centers[:,1],cluster_centers[:,0],s=200,c="black",label="centroid")
ax.set_title("CLUSTERING W: " + str(WEIGHT) + imageLT.get_image_datename()) 
ax.set_xlabel("Centre de gravité X")
ax.set_ylabel("Centre de gravité Y")
ax.invert_yaxis()
fig.legend()
fig.show()

_, index_highest = imageLT.get_highest_cluster(cluster_centers)
image_cluster = imageLT.get_image_cluster(labels_cc,cluster_labels)

imageLT.plot_image_cluster(labels_cc,cluster_labels, index_highest)

imageLT.plot_silhouette_coefficient(X,weights)

# visualizing the clusters
fig = plt.figure(figsize=(11,8))
ax = fig.add_subplot(111, projection='3d')

#X_gray_norm = X[:,2]
#X_gray = cv2.normalize(X_gray_norm, None, alpha=self.vmin, beta=self.vmax, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_64F)

for i in range(max(cluster_labels) + 1):
  ax.scatter(X[cluster_labels==i,0],X[cluster_labels==i,1],X[cluster_labels==i,2], label="cluster " + str(i+1))

#c_center_norm = cluster_centers[:,2]
#c_center = cv2.normalize(c_center_norm, None, alpha=self.vmin, beta=self.vmax, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_64F)
ax.scatter(cluster_centers[:,0],cluster_centers[:,1],cluster_centers[:,2],s=200,c="black",label="centroid "+str(i))

from scipy.spatial import distance

for i in range(len(cluster_centers) - 1):
  for j in range(len(cluster_centers)):
    xx = [cluster_centers[i][0], cluster_centers[j][0]]
    m_x = (xx[1] + xx[0]) / 2
    yy = [cluster_centers[i][1], cluster_centers[j][1]]
    m_y = (yy[1] + yy[0]) / 2
    zz = [cluster_centers[i][2], cluster_centers[j][2]]
    m_z = (zz[1] + zz[0]) / 2

    #d_1 = np.sqrt( ((xx[1] - xx[0]) ** 2) + ((yy[1] - yy[0]) ** 2) + ((zz[1] - zz[0]) ** 2) ) 
    #print(d_1)

    #ax.scatter( cluster_centers[i,1],cluster_centers[i,0] , s=10000 ,  facecolors='none', edgecolors='blue' ) 

    #ax.scatter(m_x,m_y,m_z,color="black")
    #ax.plot(xx, yy, zz, linestyle='--', marker='',color='gray')

ax.set_title("CLUSTERING W: " + str(WEIGHT) + imageLT.get_image_datename()) 
ax.set_xlabel('Centre de gravité X')
ax.set_ylabel('Centre de gravité Y')
ax.set_zlabel('Gray level normalized')
fig.legend()
ax.view_init(30, 30)
plt.draw()
plt.pause(.001)
fig.show()
plt.show()

#from yellowbrick.cluster import InterclusterDistance

# Generate synthetic dataset with 12 random clusters
#X, y = make_blobs(n_samples=1000, n_features=12, centers=12, random_state=42)

# Instantiate the clustering model and visualizer
#model = KMeans(6)
#visualizer = InterclusterDistance(model)
#visualizer.fit(X)        # Fit the data to the visualizer
#visualizer.show()        # Finalize and render the figure

directories = os.listdir( imageLT.get_DIR_TRAIN() )
 
cluster_labels1 = cluster_labels + 1

# This would print all the files and directories
for file in directories:
  only_png_files = re.search(".jpg", file)
  if only_png_files is not None:
    only_same_day = re.search(str(imageLT.get_year())+"%02d"%imageLT.get_month()+"%02d"%imageLT.get_day(), file)
    if only_same_day is not None:
      only_image_type = re.search(imageLT.get_image_type(), file)
      if only_image_type is not None:
        img = io.imread(imageLT.get_DIR_TRAIN() + file)
        #img = cv2.cvtColor(img, cv2.COLOR_RGBA2RGB)
        img_hsv = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
        img_gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
        #img_gray = ma.masked_values(img_gray, 255.)
        img_gray = cv2.GaussianBlur(img_gray,(5,5),cv2.BORDER_DEFAULT)

        best_regions_c = list()
        worst_regions_c = list()

        all_true_positives_c = list()
        all_true_negatives_c = list()
        all_false_positives_c = list()
        all_false_negatives_c = list()
        all_accuracy_c = list()
        f_p = list()
        f_n = list()

        for i in range(1,max(cluster_labels1) + 1):
          im_bin = img_gray.copy()
          
          im_orig = np.zeros(image_projected.shape, np.uint8)
          im_orig = np.where(image_cluster == i,1, im_orig)

          im_bin = cv2.normalize(im_bin, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_8U)
          im_orig = cv2.normalize(im_orig, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_8U)

          ## CONTOURS IM_BIN
          contours_bin, _ = cv2.findContours(im_bin, 1, 2)
          cnt_bin = contours_bin[0]
          M_bin = cv2.moments(cnt_bin)
          # Calculate centroid
          cx_bin = int(M_bin['m10']/M_bin['m00'])
          cy_bin = int(M_bin['m01']/M_bin['m00'])

          ## CONTOURS IM_ORIG
          tmp = np.zeros(im_orig.shape, np.uint8)
          #tmp = cv2.cvtColor(tmp, cv2.COLOR)
          contours_orig, _ = cv2.findContours(im_orig, 1, 2)

          cx_orig_centers = list() # list of all centers of mini contous
          cy_orig_centers = list()

          for cnt in contours_orig:
            x,y,w,h = cv2.boundingRect(cnt)
            cx = ( x + (x + w) ) / 2
            cy = ( y + (y + h) ) / 2 
            
            cx_orig_centers.append(cx)
            cy_orig_centers.append(cy)
          
          cx_orig_mean = np.mean(cx_orig_centers)
          cy_orig_mean = np.mean(cy_orig_centers)

          #cx_mean_orig = np.mean(c_orig_centers[:,0])
          #cy_mean_orig = np.mean(c_orig_centers)
          #print(cx_mean_orig,cy_mean_orig)
          
          
          #cnt_orig = contours_orig[0]
          #M_orig = cv2.moments(cnt_orig)
          #print("area: ",M_orig['m00'])

          ## Calculate centroid
          #cx_orig = int(M_orig['m10']/M_orig['m00'])
          #cy_orig = int(M_orig['m01']/M_orig['m00'])
          
          c_m_temp = confusion_matrix(im_bin.flatten(), im_orig.flatten())
          true_positives = c_m_temp[1][1]
          false_positives = c_m_temp[0][1]
          false_negatives = c_m_temp[1][0]
          true_negatives = c_m_temp[0][0]

          f_p.append(false_positives)
          f_n.append(false_negatives)

          accuracy = accuracy_score(im_bin.flatten(),im_orig.flatten()) * 100
              
          print("\n")
          total_pixels_blancs_ref = len(im_bin[im_bin == 1])
          total_pixels_blancs_test = len(im_orig[im_orig == 1])

          #im_test_ones = np.ones(im_bin.shape, np.uint8)
          #im_test_ones = np.where(im_bin == 1,0,im_test_ones)
          #im_test_ones = np.where(im_orig == 1,0,im_test_ones)
          #total_pixels_noirs = len(im_test_ones[im_test_ones == 1])

          #print("pixels: true_positives", true_positives)
          #print("pixels: false_positives",false_positives)
          #print("pixels: false_negatives",false_negatives)
          #print("pixels: true_negatives",true_negatives)
          #print("total_pixels_blancs_ref", total_pixels_blancs_ref)
          #print("total_pixels_blancs_test", total_pixels_blancs_test)
          
          #print("perc: true_positives", int(true_positives * 100 / total_pixels_blancs_test), "%")
          #print("perc: false_positives", int(false_positives * 100 / total_pixels_blancs_test), "%")
          #print("perc: false_negatives", int(false_negatives * 100 / total_pixels_blancs_ref), "%")
          ##print("perc: true_negatives", int(true_negatives * 100 / total_pixels_noirs), "%")

          all_true_positives_c.append(true_positives * 100 / total_pixels_blancs_test)
          all_false_positives_c.append(false_positives * 100 / total_pixels_blancs_test)
          all_false_negatives_c.append(false_negatives * 100 / total_pixels_blancs_ref)
          #all_true_negatives.append(true_negatives * 100 / total_pixels_noirs)
          all_accuracy_c.append(accuracy)

          #if int(true_positives * 100 / total_pixels_blancs_test) >= 30:
          #  best_regions_c.append(im_orig)
          #else:
          #  worst_regions_c.append(im_orig)

          ##error = np.sum(np.abs(im_orig - im_bin))

          #cnt = contours[4]
          #img_c = cv2.cvtColor(t_i, cv2.COLOR_GRAY2RGB)
          #cv2.drawContours(img_c, [cnt], 0, (0,255,0), 3)
          #bi = np.zeros(im_bin.shape, np.uint8)
          #bii = cv2.cvtColor(bi, cv2.COLOR_GRAY2RGB)

          mid_point_x = (cx_orig_mean + cx_bin) / 2
          mid_point_y = (cy_orig_mean + cy_bin) / 2


          ## visualize the differences between the original image and the solution
          plt.figure()
          plt.title("Ground Truth and Regions" + imageLT.get_image_datename())
          #plt.scatter([cx_bin],[cy_bin], c="green")
          #cv2.drawContours(bii, contours_bin, -1, (0,255,0), 3)
          #plt.scatter([cx_orig_mean],[cy_orig_mean], c="blue")
          #plt.plot([cx_orig_mean,cx_bin], [cy_orig_mean,cy_bin], "--",c="white")
          #plt.scatter([mid_point_x],[mid_point_y], c="yellow")

          #cv2.drawContours(bii, [hull],0,(0,255,0),2)
          #cv2.drawContours(bii, contours_orig, -1, (255,0,0), 3)
          #plt.imshow(bii)
          plt.imshow(np.dstack((np.int_(im_orig), im_bin, im_bin))*255)
          plt.show()

sensitivity_c = list()
for i,tp in enumerate(all_true_positives_c):
  sensitivity_c.append(tp / (tp + all_false_negatives_c[i]) * 100) 

fig, ax = plt.subplots(1,1)
ax.plot( np.arange(len(all_true_positives_c)), all_true_positives_c, label="True Positives")
ax.plot( np.arange(len(all_false_positives_c)), all_false_positives_c, label="False Positives")
ax.plot( np.arange(len(all_false_negatives_c)), all_false_negatives_c, label="False Negatives")
ax.plot( np.arange(len(all_accuracy_c)), all_accuracy_c, "--", label="Accuracy")
ax.plot( np.arange(len(sensitivity_c)), sensitivity_c, "--", label="Sensitivity")

ax.set_title('Confusion Matrix variation - IASI ' + imageLT.image_type + " - " + str(imageLT.day) +"/"+ str(imageLT.month) +"/"+ str(imageLT.year))
ax.set_xlabel("Cluster index")
ax.set_ylabel("Confusion Matrix values %")
ax.legend()

xx_r = [0, 110]
yy_r = [0, 110]
fig, ax = plt.subplots(1,1)

plt_f_p = np.unique(all_false_positives_c) # como hay valores repetidos, solo ploteare la linea de los que no son repetidos
plt_f_n = np.unique(all_false_negatives_c)

#ax.plot(plt_f_p, plt_f_n)
ax.scatter([all_false_positives_c], [all_false_negatives_c])
ax.set_xlabel("% False Negatives")
ax.set_ylabel("% False Positives")
ax.set_xlim(*xx_r)
ax.set_ylim(*yy_r)
#ax.plot( all_false_positives_c, all_false_negatives_c, label="False Negatives")
#ax.legend()
fig.show()















def setIterationForDay(day=1,typei="LT"):
  imageLT = SplitImageLevels()
  month=5

  imageLT.set_year(2008)
  imageLT.set_month(month)
  imageLT.set_day(day)
  imageLT.set_image_type(typei)
  imageLT.set_image_name("levels")
  imageLT.set_weight_gray_values(1)
  imageLT.set_cluster_value(30)
  imageLT.set_pixel_size(0.25,.125)
  imageLT.get_image_by_leves()
  bgr , gray = imageLT.load_image_from_files(imageLT.get_image_name())
  image, foreground, background = imageLT.filter_image(gray)
  kernel = np.ones((3,3),np.uint8)
  foreground = cv2.dilate(foreground,kernel,iterations = 3)
  image1 = cv2.bitwise_and(image,image, mask=foreground)
  image2 = cv2.bitwise_and(image,image, mask=background)
  myimage = cv2.cvtColor(image1, cv2.COLOR_GRAY2RGB)
  myimage = cv2.bitwise_and(myimage,myimage, mask=foreground)
  t_i = ma.masked_values(image1, 0.)
  mser = cv2.MSER_create( 1, # delta 
                        100, # min_area
                        34400, #max_area 
                        4., # max_variation 
                        .01, # min_diversity 
                        10000, # max_evolution 
                        1.04, # area_threshold 
                        0.003, # min_margin
                        5) # edge_blur_size

  # (1, 100, 20000, .25, 1., 1000, 1.001, 0.003, 5)
  regions, bboxes = mser.detectRegions(myimage)
  regions = sorted(regions, key=cv2.contourArea, reverse=True)
  regx, regy, polys, lines, values = imageLT.set_mser_regions(t_i, background, regions[:])
  
  export_original_d(day,typei)
  export_regions(day,typei)

def export_original_d(day=1,typei="LT"):
  month=5
  fig2, (ax2) = plt.subplots(1, 1, figsize = (11,8))
  ax2.pcolormesh(imageLT.v_x, imageLT.v_y, imageLT.colgrid1, shading='nearest',cmap='jet', vmin=imageLT.vmin, vmax=imageLT.vmax)
  ax2.axis('off')
  image_name = typei + '-color-' + str(2008) + '%02d'%month+'%02d'%day+'.png'
  fig2.savefig(DIR_TEST + "06-06/"+ image_name, bbox_inches='tight', pad_inches=0)
  plt.close(fig2)

def export_regions(day=1,typei="LT"):
  month=5
  x_range = [0, image.shape[1]]
  y_range = [0, image.shape[0]]

  fig, ax = plt.subplots(1,1, figsize=(11,8), facecolor=(0, 0, 0))

  if imageLT.image_type == 'LT':
    max_color_value = 35
  else:
    max_color_value = 45

  colors = sns.color_palette("YlOrBr_r", max_color_value + 1)
  cmap = matplotlib.colors.ListedColormap(colors)
  norm = matplotlib.colors.BoundaryNorm(np.arange(max_color_value + 1) - 0.5, cmap.N)

  for i,val in enumerate(values):
    ax.scatter(regx[i], regy[i], marker='.', color=cmap(norm(int(val))) )
    ax.set_xlim(*x_range)
    ax.set_ylim(*y_range)
    ax.invert_yaxis()
    ax.axis('off')

  matplotlib.cm.ScalarMappable(cmap=cmap, norm=norm)
  image_name = typei + '-reg-' + str(2008) + '%02d'%month+'%02d'%day+'.png'
  fig.savefig(DIR_TEST + "06-06/" + image_name, bbox_inches='tight', pad_inches=0,transparent=True)
  plt.close(fig)









